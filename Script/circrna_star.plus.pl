# Author: Marcel Smid
# License: CC:BY:SA:NC (Creative Commons Attribution-ShareAlike-NonCommercial 4.0 International)
# Disclaimer: author is not professionally trained as programmer, and realizes TIMTOWTDI.
#
# find circular RNAs, using mapped reads with mate spanning the junction
# prerequisites:
#  DATA 
#-RNA processed without a poly(A) selection step
#-paired-end sequence data
#-mapped by the STAR aligning software (https://github.com/alexdobin/STAR)
#-bam file sorted and indexed
#   -expects prefix 'chr' for chromosomes
#
#  Perl and other necessary files / tools
#-package File::Find
#-samtools (https://github.com/samtools/)
# -Gencode gene annotation, gtf format (ftp://ftp.ebi.ac.uk/pub/databases/gencode/)
#
#
# 
############        VERSION DEVELOPED FOR WINDOWS BOX, HARDCODED PATHS 
############               - set lines 27-33


use File::Find;
#location of bam files (.bai needed!)
$dir = "/molbio/projects/rabbit/unkp_zsofi/circRNA-star/test-site/in/";
#location of output files
$outdir = "/molbio/projects/rabbit/unkp_zsofi/circRNA-star/test-site/tmp/";
#location of samtools
$samdir = "/usr/local/molbio/bin/";
#location of Gencode GTF
$gtf = "/molbio/flatfiles/genomes/oc/Oryctolagus_cuniculus.OryCun2.0.104.gtf ";

# patterns of read-flags, as provided by SAM specifications
$pattern  = " 2129 2209 2193 2145";
$pattern2 = "83 163 147 99";

# needed for windows, otherwise samtools will not auto-close after each bam file
# optional change to wanted chromosomes only
$chr_string

#show print statements immediately
$|=1;

# annotation from Gencode, extract HAVANA exons information
# make sure the Gencode version matches the reference genome version used by STAR for mapping
open GTF, $gtf or die "Cannot find gtf file";
while ($line=<GTF>) {
    chomp $line;
    @fields = split "\t", $line;
    if ($fields[2] eq "exon" ){ # && $fields[1] eq "HAVANA") {
	#chr_exon start
	$uni = $fields[0]."_".$fields[3];
	
	#chr_exon end
	$uni2 = $fields[0]."_".$fields[4];
	
	#annot
	$temp = $fields[8];
	$temp =~ s/"//g;
	$temp =~ /gene_id (.+?);.+gene_name (.+?);.+exon_id (.+?);/;
# $ensembl = $1; $name = $2; $exon = $3;
	$annot = $1."\t".$2."\t".$3;
	unless (defined $gtf_annot{$uni}) {
	    $gtf_annot{$uni} = $annot;
	}
	unless (defined $gtf_annot{$uni2}) {
	    $gtf_annot{$uni2} = $annot;
	}
    }
}
print "GTF loaded\n";
find(\&process_file, $dir);


sub process_file {
    $open = $File::Find::name;
    
    #loop per bam-file
    if ($open =~ /\.bam$/) {
	
	$sample_name = $_;
	# optionally parse $_ to get a cleaner sample_name for output
	open (TRIO, ">".$outdir.$sample_name."_trio.sam" );
	print "running ",$sample_name,"\n";
	
	# get reads using samtools, -F 4 for mapped reads only
	open IN, $samdir."samtools view -F 4 $open $chr_string |"  or die "cannot find input bam $open";
	open OUT, ">".$outdir.$sample_name."_mapped_circRNA.txt";
	
	#reset variables for new sample
	$start=time();$row=0;undef %wanted;undef %region; undef %region_flag;
	undef %flags; $correct_count=$regions_count=0;
	
      LBL1:while ($line=<IN>) {
	  $row++;
	  if ($row%10000000==0) {print $sample_name,": ",$row,"\n";}
	  
	  @fields = split "\t", $line;
	  # just to really make sure it doesn't parse MT if ppl remove $chr_string
	  if ($fields[2] eq "chrM") {
	      close IN;
	      last LBL1;
	      print "oops. parsing chrM is a bad idea\n";
	  }
	  
	  #prevent match of flag 145 129
	  $temp = " ".$fields[1];
	  
	  #check flag pattern for wanted reads, only use uniquely mapped (MAPQ==255)
	  if ($pattern =~ /$temp/ && $fields[4]==255) {
	      chomp $line;
	      
	      #fill hash by readname
	      push @{$wanted{$fields[0]}}, $line;
	      next LBL1;
	  }
	  if ($pattern2 =~ /$fields[1]/ && $fields[4]==255) {
	      chomp $line;
	      # contains proper pair flags; check for secondary alignment label and MAPQ of 255 (unique map)
	      # in STAR mapped bam file, the secondary alignment is present in the last field
	      # if data has been MarkDuplicate by Picard, then it is not the last field, but in 1 case field[11]
	      # not sure if this field - after MarkDup by Picard - is universal
	      
	      # after STAR
	      if ($fields[$#fields] =~ /^SA:Z/) {
		  
		  #after STAR & Markduplicate
		  #if ($fields[11] =~ /^SA:Z/) {
		  #$flag{$fields[1]}++;
		  
		  #fill hash by readname
		  push @{$wanted{$fields[0]}}, $line;
		  
		  next LBL1;
		  
	      }
	      # but also the third partner is needed; this read does not have secondary alignment
	      # will only be needed/present if either the 21xx read has been seen, or the one with the SA label
	      if (defined $wanted{$fields[0]}) {
		  push @{$wanted{$fields[0]}}, $line;
	      }
	  }
	  
      }
	$inter=time();print "all lines parsed in ",$inter-$start," seconds\n";
	
	# reads indicative of circRNA have specific order of flags
	# several possibilities depending on read orientations
	$correct = " 2129_163_83 83_163_2129 2209_83_163 163_83_2209 2193_99_147 147_99_2193 2145_147_99 99_147_2145";
	
	# now check for circular RNA
	foreach $readname (keys %wanted) {

	    # we need a trio
	    if (scalar @{$wanted{$readname}} == 3) {
		
		# need certain combinations in the correct order, so get order of flags for this read
		$flag=" ";
		for $i (0..2) {
		    $temp=$wanted{$readname}[$i];
		    print TRIO "$temp\n";
		    @fields=split "\t", $temp;
		    $flag .= $fields[1]."_";
		    # while we are here, save some data
		    if ($i==0) { $junction_left = $fields[3]; $chr_left=$fields[2];}
		    if ($i==1) { $chr_middle=$fields[2];}
		    if ($i==2) { $pos_right = $fields[3]; $cigar_right = $fields[5]; $SA = $fields[$#fields];}
		}
		#remove last _
		chop $flag;
		
		
		# check if this is a combi plus order indicative of circular read
		if ($correct =~ /$flag/) {
		    #check if all reads are on same chromosome
		    if ($SA =~ /SA:Z:(.+?),/) {
			if ($1 eq $chr_left) {
			    if ($chr_left eq $chr_middle) {
				$correct_count++;
				
				# gather region info for output
				# the left junction is the mapped position (5' start pos of read)
				# the right junction is the mapped position plus the number of matches
				# as listed by CIGAR. The CIGAR score always must be xxMyyH, or at least 1 or more digits followed by M
				$cigar_right =~ /(\d+)M/;
				$junction_right = $pos_right + $1 - 1;
				$uni = $chr_left.":".$junction_left."-".$junction_right;
				$region{$uni}++;
				$region_flag{$uni}{$flag}++;
				$flags{$flag}=1;
			    }
			}
		    }
		    
		}
	    }
	}
	print $correct_count," circular trio's found.\nFinding regions in gtf and output\n";
	
	# match with gencode
	# if no match, then still output
	# OUTPUT has region where circRNA has start and end-point (Chr-start-end),
	# the total number of reads supporting the junction, also specified by flag type
	# size of region (end-start), followed by annotation, if matching with HAVANA exons
 
	print OUT "Region\tTotal";
	foreach $flag (keys %flags) {
	    print OUT "\t",$flag;
	}
	print OUT "\tSize\tEnsemble_start\tGene_start\texon_number_start\tEnsemble_end\tGene_end\texon_number_end\n";
	
	foreach $region (keys %region) {
	    $regions_count++;
	    print OUT $region,"\t",$region{$region};
	    foreach $flag (keys %flags) {
		print OUT "\t",$region_flag{$region}{$flag};
	    }
	    #split region for matchin with Encode
	    $region =~ /(.+):(\d+)-(\d+)/;
	    print OUT "\t",$3-$2,"\t";
	    $uni = $1."_".$2;
	    
	    if (defined $gtf_annot{$uni}) {
		print OUT $gtf_annot{$uni},"\t";
	    } else {
		print OUT "\t\t\t";
	    }
	    $temp=$3;
	    $uni = $1."_".$temp;
	    if (defined $gtf_annot{$uni}) {
		print OUT $gtf_annot{$uni},"\n";
	    } else {
		print OUT "\n";
	    }
	}
	$end = time();
	print $regions_count," regions found.\nTotal runtime: ",$end-$start," seconds.\n\n";
	close;
	
    } # end of bam loop

} # end of process dir loop
